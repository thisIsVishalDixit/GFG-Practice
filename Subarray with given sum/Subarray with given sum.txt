

class Solution {
    // Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int sum) {
        int currSum = 0;
        int start = 0;
        int end = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        ArrayList<Integer> result = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            currSum += arr[i];
            
            if (currSum == sum) {
                start = 0;
                end = i;
                break;
            }
            
            if (map.containsKey(currSum - sum)) {
                start = map.get(currSum - sum) + 1; // Adjust for 1-based indexing
                end = i;
                break;
            }
            
            map.put(currSum, i);
        }

        if (end == -1) {
            result.add(-1);
        } else {
            result.add(start + 1); // Adjust for 1-based indexing
            result.add(end + 1);   // Adjust for 1-based indexing
        }

        return result;
    }
}